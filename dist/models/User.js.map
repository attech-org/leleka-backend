{"version":3,"file":"User.js","sourceRoot":"","sources":["../../src/models/User.ts"],"names":[],"mappings":"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","sourcesContent":["import bycrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport crypto from \"crypto\";\nimport { model, Schema, Model, Document } from \"mongoose\";\n\n//declare point type\nexport interface IPoint extends Document {\n  type: string;\n  coordinates: string;\n}\n//generate point schema\nconst Point: Schema = new Schema({\n  type: {\n    type: String,\n    enum: [\"Point\"],\n    required: true,\n  },\n  coordinates: {\n    type: [Number],\n    required: true,\n  },\n});\n//declare user type\nexport interface IUser extends Document {\n  getResetPasswordToken(): string;\n  getSignedToken(): string;\n  resetPasswordToken: string | undefined;\n  resetPasswordExpire: string | undefined;\n  matchPassword(password: string): boolean | PromiseLike<boolean>;\n  username: string;\n  password: string;\n  email: string;\n  profile: {\n    firstName: String;\n    lastName: String;\n    avatar: String;\n    bio: String;\n    phone: String;\n    gender: String;\n    address: {\n      street1: String;\n      street2: String;\n      city: String;\n      state: String;\n      country: String;\n      zip: String;\n      location: {\n        type: IPoint;\n        required: false;\n      };\n    };\n    active: true;\n  };\n}\n// define user schema\nconst UserSchema: Schema = new Schema({\n  username: {\n    type: String,\n    lowercase: true,\n    unique: true,\n    required: [true, \"Can't be blank\"],\n    index: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    select: false,\n    minlength: [8, \"Please use minimum of 8 characters\"],\n  },\n  email: {\n    type: String,\n    lowercase: true,\n    required: [true, \"Can't be blank\"],\n    match: [/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, \"Please use a valid address\"],\n    unique: true,\n    index: true,\n  },\n  profile: {\n    firstName: String,\n    lastName: String,\n    avatar: String,\n    bio: String,\n    phone: String,\n    gender: String,\n    address: {\n      street1: String,\n      street2: String,\n      city: String,\n      state: String,\n      country: String,\n      zip: String,\n      location: {\n        type: Point,\n        required: false,\n      },\n    },\n    required: false,\n  },\n  resetPasswordToken: String,\n  resetPasswordExpire: String,\n\n  active: { type: Boolean, default: true },\n});\n\nUserSchema.pre<IUser>(\"save\", async function (next: any) {\n  if (!this.isModified(\"password\")) {\n    return next();\n  }\n  const salt = await bycrypt.genSalt(10);\n  this.password = bycrypt.hashSync(this.password, 10);\n  next();\n});\n\nUserSchema.methods.matchPassword = async function (password: string) {\n  return await bycrypt.compare(password, this.password);\n};\nUserSchema.methods.getSignedToken = function (password: string) {\n  return jwt.sign({ id: this._id }, process.env.JWT_SECRET!, {\n    expiresIn: process.env.JWT_EXPIRE,\n  });\n};\nUserSchema.methods.getResetPasswordToken = function () {\n  const resetToken = crypto.randomBytes(20).toString(\"hex\");\n  this.resetPasswordToken = crypto\n    .createHash(\"sha256\")\n    .update(resetToken)\n    .digest(\"hex\");\n  this.resetPasswordExpire = Date.now() + 10 * (60 * 1000);\n  return resetToken;\n};\n\nexport const User: Model<IUser> = model(\"User\", UserSchema);\n"]}